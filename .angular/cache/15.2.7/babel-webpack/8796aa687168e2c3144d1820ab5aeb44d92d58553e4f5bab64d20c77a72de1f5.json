{"ast":null,"code":"import { catchError, map } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class WeatherService {\n  constructor(http) {\n    this.http = http;\n  }\n  getWeather(city, countryCode) {\n    // Replace YOUR_API_KEY with your actual API key from OpenWeatherMap\n    const apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${city},${countryCode}&units=metric&appid=5fb663bc385b723bc97ce10fe43141c4`;\n    console.log(\"today weather\");\n    return this.http.get(apiUrl);\n  }\n  getForecastData(city, countryCode) {\n    const url = `https://api.openweathermap.org/data/2.5/forecast?q=${city},${countryCode}&units=metric&appid=5fb663bc385b723bc97ce10fe43141c4`;\n    console.log(\"5day weather\");\n    return this.http.get(url).pipe(map(data => {\n      return data.list.filter(item => {\n        return item.dt_txt.includes(\"12:00:00\"); // Filter to include only the 12:00:00 forecast for each day\n      });\n    }), catchError(this.handleError));\n  }\n  handleError(error) {\n    console.error('An error occurred:', error);\n    return throwError(error.message || 'Something went wrong');\n  }\n}\nWeatherService.ɵfac = function WeatherService_Factory(t) {\n  return new (t || WeatherService)(i0.ɵɵinject(i1.HttpClient));\n};\nWeatherService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WeatherService,\n  factory: WeatherService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;AAChD,SAAqBC,UAAU,QAAQ,MAAM;;;AAK7C,OAAM,MAAOC,cAAc;EACvBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EAAgB;EACxCC,UAAU,CAACC,IAAY,EAAEC,WAAmB;IACxC;IACA,MAAMC,MAAM,GAAG,qDAAqDF,IAAI,IAAIC,WAAW,sDAAsD;IAC7IE,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;IAC5B,OAAO,IAAI,CAACN,IAAI,CAACO,GAAG,CAACH,MAAM,CAAC;EAChC;EACAI,eAAe,CAACN,IAAY,EAAEC,WAAmB;IAC7C,MAAMM,GAAG,GAAG,sDAAsDP,IAAI,IAAIC,WAAW,sDAAsD;IAC3IE,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;IAC3B,OAAO,IAAI,CAACN,IAAI,CAACO,GAAG,CAACE,GAAG,CAAC,CAACC,IAAI,CAC1Bd,GAAG,CAAEe,IAAS,IAAI;MACd,OAAOA,IAAI,CAACC,IAAI,CAACC,MAAM,CAAEC,IAAS,IAAI;QAClC,OAAOA,IAAI,CAACC,MAAM,CAACC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC;MAC7C,CAAC,CAAC;IACN,CAAC,CAAC,EACFrB,UAAU,CAAC,IAAI,CAACsB,WAAW,CAAC,CAC/B;EACL;EAEQA,WAAW,CAACC,KAAU;IAC1Bb,OAAO,CAACa,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC1C,OAAOrB,UAAU,CAACqB,KAAK,CAACC,OAAO,IAAI,sBAAsB,CAAC;EAC9D;;AAxBSrB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAsB,SAAdtB,cAAc;EAAAuB,YAFX;AAAM","names":["catchError","map","throwError","WeatherService","constructor","http","getWeather","city","countryCode","apiUrl","console","log","get","getForecastData","url","pipe","data","list","filter","item","dt_txt","includes","handleError","error","message","factory","providedIn"],"sourceRoot":"","sources":["/Users/samimnif/weather-app/src/app/weather.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { catchError, map } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class WeatherService {\n    constructor(private http: HttpClient) { }\n    getWeather(city: string, countryCode: string) {\n        // Replace YOUR_API_KEY with your actual API key from OpenWeatherMap\n        const apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${city},${countryCode}&units=metric&appid=5fb663bc385b723bc97ce10fe43141c4`;\n        console.log(\"today weather\");\n        return this.http.get(apiUrl);\n    }\n    getForecastData(city: string, countryCode: string) {\n        const url = `https://api.openweathermap.org/data/2.5/forecast?q=${city},${countryCode}&units=metric&appid=5fb663bc385b723bc97ce10fe43141c4`;\n        console.log(\"5day weather\");\n        return this.http.get(url).pipe(\n            map((data: any) => {\n                return data.list.filter((item: any) => {\n                    return item.dt_txt.includes(\"12:00:00\"); // Filter to include only the 12:00:00 forecast for each day\n                });\n            }),\n            catchError(this.handleError)\n        );\n    }\n\n    private handleError(error: any) {\n        console.error('An error occurred:', error);\n        return throwError(error.message || 'Something went wrong');\n    }\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}