{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./weather.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction AppComponent_div_12_div_42_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 22)(1, \"p\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"img\", 23);\n    i0.ɵɵelementStart(5, \"p\", 18);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"p\", 18);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementStart(9, \"small\", 24);\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(11, \"br\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const forecast_r2 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(3, 5, forecast_r2.dt_txt, \"EEE\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"src\", \"https://openweathermap.org/img/wn/\" + forecast_r2.weather[0].icon + \".png\", i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(forecast_r2.weather[0].description);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"T:\", forecast_r2.main.temp_max, \"\\u00B0 \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"H:\", forecast_r2.main.humidity, \"%\");\n  }\n}\nfunction AppComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10)(1, \"div\", 11)(2, \"h2\", 12);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"div\", 2)(5, \"div\", 13)(6, \"div\", 14)(7, \"div\", 15);\n    i0.ɵɵelement(8, \"img\", 16);\n    i0.ɵɵelementStart(9, \"p\", 17);\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(11, \"div\", 14)(12, \"div\", 15)(13, \"h2\", 18);\n    i0.ɵɵtext(14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"p\", 18)(16, \"strong\");\n    i0.ɵɵtext(17, \"Low:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(18);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(19, \"p\", 18)(20, \"strong\");\n    i0.ɵɵtext(21, \"Max:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(22);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(23, \"div\", 19)(24, \"div\", 15)(25, \"p\", 18)(26, \"strong\");\n    i0.ɵɵtext(27, \"Humidity:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(28);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(29, \"p\", 18)(30, \"strong\");\n    i0.ɵɵtext(31, \"Pressure:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(32);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(33, \"p\", 18)(34, \"strong\");\n    i0.ɵɵtext(35, \"Wind:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(36);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelement(37, \"div\", 20);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(38, \"hr\");\n    i0.ɵɵelementStart(39, \"h2\");\n    i0.ɵɵtext(40, \"5-day Forecast\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(41, \"div\", 8);\n    i0.ɵɵtemplate(42, AppComponent_div_12_div_42_Template, 12, 8, \"div\", 21);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate2(\"\", ctx_r0.weatherData.name, \", \", ctx_r0.weatherData.sys.country, \"\");\n    i0.ɵɵadvance(5);\n    i0.ɵɵpropertyInterpolate(\"alt\", ctx_r0.weatherData.weather[0].description);\n    i0.ɵɵproperty(\"src\", \"https://openweathermap.org/img/wn/\" + ctx_r0.weatherData.weather[0].icon + \"@2x.png\", i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.weatherData.weather[0].description);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r0.weatherData.main.temp, \"\\u00B0C\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.weatherData.main.temp_min, \" \\u00B0C\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.weatherData.main.temp_max, \" \\u00B0C\");\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.weatherData.main.humidity, \"%\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.weatherData.main.pressure, \" hPa\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.weatherData.wind.speed, \" km/h\");\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.forecastData);\n  }\n}\nexport class AppComponent {\n  constructor(weatherService) {\n    this.weatherService = weatherService;\n    this.lon = '';\n    this.lat = '';\n    this.city = '';\n    this.countryCode = '';\n    this.weatherData = null;\n  }\n  ngOnInit() {\n    this.getWeather();\n    this.getForecastData();\n  }\n  getWeather() {\n    this.weatherService.getWeather(this.city, this.countryCode).subscribe(data => {\n      console.log(data); // Debugging purposes\n      this.weatherData = data;\n    });\n  }\n  getForecastData() {\n    this.weatherService.getForecastData(this.city, this.countryCode).subscribe(data => {\n      console.log(data);\n      this.forecastData = data;\n    });\n  }\n}\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.WeatherService));\n};\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 13,\n  vars: 3,\n  consts: [[1, \"row\", \"justify-content-md-center\", 2, \"padding\", \"20px\"], [1, \"card\", 2, \"width\", \"25rem\"], [1, \"card-body\"], [1, \"row\", \"g-2\"], [1, \"col-md-6\"], [\"type\", \"text\", \"placeholder\", \"City\", \"aria-label\", \"First name\", \"id\", \"city\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"text\", \"placeholder\", \"Country Code\", \"aria-label\", \"Last name\", \"id\", \"countryCode\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", 3, \"click\"], [1, \"row\", \"justify-content-md-center\"], [\"class\", \"card\", \"style\", \"width: 70%;\", 4, \"ngIf\"], [1, \"card\", 2, \"width\", \"70%\"], [1, \"card-header\"], [1, \"mb-0\"], [1, \"row\"], [1, \"col-md-2\"], [1, \"d-flex\", \"flex-column\", \"justify-content-center\", \"align-items-center\"], [1, \"img-fluid\", 3, \"src\", \"alt\"], [1, \"my-3\"], [1, \"my-0\"], [1, \"col-md-3\"], [\"id\", \"map\"], [\"class\", \"col-md-2 d-flex flex-column justify-content-center align-items-center\", 4, \"ngFor\", \"ngForOf\"], [1, \"col-md-2\", \"d-flex\", \"flex-column\", \"justify-content-center\", \"align-items-center\"], [3, \"src\"], [1, \"text-muted\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"input\", 5);\n      i0.ɵɵlistener(\"ngModelChange\", function AppComponent_Template_input_ngModelChange_5_listener($event) {\n        return ctx.city = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(6, \"div\", 4)(7, \"input\", 6);\n      i0.ɵɵlistener(\"ngModelChange\", function AppComponent_Template_input_ngModelChange_7_listener($event) {\n        return ctx.countryCode = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(8, \"div\", 4)(9, \"button\", 7);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_9_listener() {\n        ctx.getWeather();\n        return ctx.getForecastData();\n      });\n      i0.ɵɵtext(10, \"Get Weather\");\n      i0.ɵɵelementEnd()()()()()();\n      i0.ɵɵelementStart(11, \"div\", 8);\n      i0.ɵɵtemplate(12, AppComponent_div_12_Template, 43, 12, \"div\", 9);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngModel\", ctx.city);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngModel\", ctx.countryCode);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.weatherData);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgModel, i2.DatePipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["i0","AppComponent","constructor","weatherService","ngOnInit","getWeather","getForecastData","city","countryCode","subscribe","data","console","log","weatherData","forecastData","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/samimnif/weather-app/src/app/app.component.html","/Users/samimnif/weather-app/src/app/app.component.ts"],"sourcesContent":["<div class=\"row justify-content-md-center\" style=\"padding: 20px;\">\n  <div class=\"card\" style=\"width: 25rem;\">\n    <div class=\"card-body\">\n      <div class=\"row g-2\">\n        <div class=\"col-md-6\">\n          <input type=\"text\" class=\"form-control\" placeholder=\"City\" aria-label=\"First name\" id=\"city\"\n            [(ngModel)]=\"city\">\n        </div>\n        <div class=\"col-md-6\">\n          <input type=\"text\" class=\"form-control\" placeholder=\"Country Code\" aria-label=\"Last name\" id=\"countryCode\"\n            [(ngModel)]=\"countryCode\">\n        </div>\n        <div class=\"col-md-6\">\n          <button type=\"button\" class=\"btn btn-primary\" (click)=\"getWeather();getForecastData()\">Get Weather</button>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n<div class=\"row justify-content-md-center\">\n  <div *ngIf=\"weatherData\" class=\"card\" style=\"width: 70%;\">\n    <div class=\"card-header\">\n      <h2 class=\"mb-0\">{{ weatherData.name }}, {{ weatherData.sys.country }}</h2>\n    </div>\n    <div class=\"card-body\">\n      <div class=\"row\">\n        <div class=\"col-md-2\">\n          <div class=\"d-flex flex-column justify-content-center align-items-center\">\n            <img [src]=\"'https://openweathermap.org/img/wn/' + weatherData.weather[0].icon + '@2x.png'\"\n              alt=\"{{ weatherData.weather[0].description }}\" class=\"img-fluid\">\n            <p class=\"my-3\">{{ weatherData.weather[0].description }}</p>\n          </div>\n        </div>\n        <div class=\"col-md-2\">\n          <div class=\"d-flex flex-column justify-content-center align-items-center\">\n            <h2 class=\"my-0\">{{ weatherData.main.temp }}°C</h2>\n            <p class=\"my-0\"><strong>Low:</strong> {{ weatherData.main.temp_min }} °C</p>\n            <p class=\"my-0\"><strong>Max:</strong> {{ weatherData.main.temp_max }} °C</p>\n          </div>\n        </div>\n        <div class=\"col-md-3\">\n          <div class=\"d-flex flex-column justify-content-center align-items-center\">\n            <p class=\"my-0\"><strong>Humidity:</strong> {{ weatherData.main.humidity }}%</p>\n            <p class=\"my-0\"><strong>Pressure:</strong> {{ weatherData.main.pressure }} hPa</p>\n            <p class=\"my-0\"><strong>Wind:</strong> {{ weatherData.wind.speed }} km/h</p>\n          </div>\n        </div>\n        <div id=\"map\"></div>\n      </div>\n    </div>\n    <hr>\n    <h2>5-day Forecast</h2>\n    <div class=\"row justify-content-md-center\">\n      <div class=\"col-md-2 d-flex flex-column justify-content-center align-items-center\"\n        *ngFor=\"let forecast of forecastData\">\n        <p>{{ forecast.dt_txt | date:'EEE' }}</p>\n        <img [src]=\"'https://openweathermap.org/img/wn/' + forecast.weather[0].icon + '.png'\">\n        <p class=\"my-0\">{{ forecast.weather[0].description }}</p>\n        <p class=\"my-0\">T:{{ forecast.main.temp_max }}° <small class=\"text-muted\">H:{{ forecast.main.humidity }}%</small></p>\n        <br>\n      </div>\n    </div>\n  </div>\n</div>","import { Component } from '@angular/core';\nimport { WeatherService } from './weather.service';\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  lon = ''\n  lat = ''\n  city = '';\n  countryCode = '';\n  weatherData: any = null;\n  forecastData!: any[];\n  constructor(private weatherService: WeatherService) { }\n  ngOnInit(): void {\n    this.getWeather();\n    this.getForecastData();\n  }\n  getWeather() {\n    this.weatherService.getWeather(this.city, this.countryCode)\n      .subscribe((data) => {\n        console.log(data); // Debugging purposes\n        this.weatherData = data;\n      });\n  }\n  getForecastData(): void {\n    this.weatherService.getForecastData(this.city, this.countryCode)\n      .subscribe(data => {\n        console.log(data);\n        this.forecastData = data;\n      });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}